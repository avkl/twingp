// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// glgp_cpp
Rcpp::List glgp_cpp(Rcpp::NumericMatrix& xy, Rcpp::NumericMatrix& x_test, std::vector<std::size_t>& gIndices, double theta, std::vector<std::size_t>& predIndices, std::size_t lNum, bool nugget, std::size_t leaf_size);
RcppExport SEXP _twingp_glgp_cpp(SEXP xySEXP, SEXP x_testSEXP, SEXP gIndicesSEXP, SEXP thetaSEXP, SEXP predIndicesSEXP, SEXP lNumSEXP, SEXP nuggetSEXP, SEXP leaf_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type xy(xySEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type x_test(x_testSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t>& >::type gIndices(gIndicesSEXP);
    Rcpp::traits::input_parameter< double >::type theta(thetaSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t>& >::type predIndices(predIndicesSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type lNum(lNumSEXP);
    Rcpp::traits::input_parameter< bool >::type nugget(nuggetSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type leaf_size(leaf_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(glgp_cpp(xy, x_test, gIndices, theta, predIndices, lNum, nugget, leaf_size));
    return rcpp_result_gen;
END_RCPP
}
// get_twinIndices
Rcpp::List get_twinIndices(Rcpp::NumericMatrix& data, std::size_t r, std::size_t rv, std::size_t runs, std::vector<std::size_t>& u1, std::size_t leaf_size);
RcppExport SEXP _twingp_get_twinIndices(SEXP dataSEXP, SEXP rSEXP, SEXP rvSEXP, SEXP runsSEXP, SEXP u1SEXP, SEXP leaf_sizeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix& >::type data(dataSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type r(rSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type rv(rvSEXP);
    Rcpp::traits::input_parameter< std::size_t >::type runs(runsSEXP);
    Rcpp::traits::input_parameter< std::vector<std::size_t>& >::type u1(u1SEXP);
    Rcpp::traits::input_parameter< std::size_t >::type leaf_size(leaf_sizeSEXP);
    rcpp_result_gen = Rcpp::wrap(get_twinIndices(data, r, rv, runs, u1, leaf_size));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_twingp_glgp_cpp", (DL_FUNC) &_twingp_glgp_cpp, 8},
    {"_twingp_get_twinIndices", (DL_FUNC) &_twingp_get_twinIndices, 6},
    {NULL, NULL, 0}
};

RcppExport void R_init_twingp(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
